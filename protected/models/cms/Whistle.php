<?php
class Whistle extends _BasePostNoMulti
{
    public $uploadImageFolder = 'upload/cms'; //remember remove ending slash
    public $defineImageSize = array(
        'featured_image' => array(array('alias' => 'thumb1', 'size' => '320x310')),
    );
    public $pageType = 'whistle';
    public $categoryId;

    // captcha
    public $google_capcha;

    public function tableName()
    {
        return '{{_whistles}}';
    }

    public static function model($className=__CLASS__)
    {
        return parent::model($className);
    }

    public function rules()
    {
        $retRules = parent::rules();
        $retRules[] = array('content, title', 'required', 'on' => 'whistleblow');
        $retRules[] = array('title,post_type, author', 'required', 'on' => 'create, update');
        $retRules[] = array('author_infos,content,title', 'safe');
        return $retRules;
    }

    public function defaultScope()
    {
        return array(
            'condition'=>"post_type='" . $this->pageType . "'",
        );
    }

    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        $return =  array(
        );
        return $return;
    }

    public function getSlugById($id)
    {
        return Whistle::model()->findByPk((int)$id);
    }

    protected function beforeSave()
    {
        $this->post_type = $this->pageType;
        $user = Users::model()->findByPk(Yii::app()->user->id);
        $this->email = $user->email;

        return parent::beforeSave(); // TODO: Change the autogenerated stub
    }

    public function search()
    {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('title', $this->title, true);
        $criteria->compare('short_content', $this->short_content, true);
        $criteria->compare('content', $this->content, true);
        $criteria->compare('status', $this->status);
        $criteria->compare('posted_by', $this->posted_by, true);
        $criteria->compare('post_type', $this->post_type, true);
        $criteria->compare('title_tag', $this->title_tag, true);
        $criteria->compare('meta_keywords', $this->meta_keywords, true);
        $criteria->compare('meta_desc', $this->meta_desc, true);
        $criteria->compare('featured_image', $this->featured_image, true);
        $criteria->compare('display_order', $this->display_order);
        $criteria->compare('created_date', $this->created_date, true);
        $criteria->compare('modified_date', $this->modified_date, true);
        $criteria->compare('slug', $this->slug, true);
        $criteria->compare('email', $this->email, true);
        $criteria->compare('author', $this->author, true);
        // gioi han search theo tung website
        $criteria->compare('role_website_id', ROLE_WEBSITE_ID, true);
        $sort = new CSort();



//		if (isset($this->pageType) && $this->pageType == 'whistle') {
//
//		}

        $sort->attributes = array(
            'email' => array(
                'asc' => 't.email',
                'desc' => 't.email desc',
                'default' => 'asc',
            ),
            'author' => array(
                'asc' => 't.author',
                'desc' => 't.author desc',
                'default' => 'asc',
            ),
            'title' => array(
                'asc' => 't.title',
                'desc' => 't.title desc',
                'default' => 'asc',
            ),
            'status' => array(
                'asc' => 't.status',
                'desc' => 't.status desc',
                'default' => 'asc',
            ),
            'created_date' => array(
                'asc' => 't.created_date',
                'desc' => 't.created_date desc',
                'default' => 'asc',
            ),
            'modified_date' => array(
                'asc' => 't.created_date',
                'desc' => 't.created_date desc',
                'default' => 'asc',
            ),
        );
        $sort->defaultOrder = 't.created_date desc';

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'sort' => $sort,
            'pagination' => array(
                'pageSize' => Yii::app()->params['defaultPageSize'],
            ),
        ));

    }

    public function getAllGrid() {
        $criteria=new CDbCriteria;
        $criteria->compare('status', STATUS_ACTIVE);
        $criteria->order = 'modified_date DESC, created_date DESC';
        return new CActiveDataProvider('Whistle', array(
            'criteria'=>$criteria,
            'pagination' => array(
                'pageSize' => 6,
            ),
        ));
    }

    public function getLatest() {
        $criteria=new CDbCriteria;
        $criteria->compare('status', STATUS_ACTIVE);
        $criteria->order = 'modified_date DESC, created_date DESC';
        $criteria->limit = 5;
        return self::model()->findAll($criteria);
    }

    public function getRelate($id) {
        $criteria=new CDbCriteria;
        $criteria->addCondition('id != '.$id);
        $criteria->compare('status', STATUS_ACTIVE);
        $criteria->order = 'modified_date DESC, created_date DESC';
        $criteria->limit = 6;
        return self::model()->findAll($criteria);
    }

    public function nextOrderNumber()
    {
        return Whistle::model()->count() + 1;
    }

    /**
     * @Author Haidt <haidt3004@gmail.com>
     * @copyright 2015 Verz Design
     * @return string
     * @Todo: render featured image
     */
    public function getFeaturedImage($size = 'thumbs') {
        if (!empty($this->featured_image)) {
            return CHtml::image(ImageHelper::getImageUrl($this, 'featured_image', $size), $this->featured_image);
        }
        return '';
    }

    /**
     * @Author Haidt <haidt3004@gmail.com>
     * @copyright 2015 Verz Design
     * @return string
     * @Todo: get title of Whistle
     */
    public function getTitle() {
        return $this->title;
    }

    /**
     * @Author Haidt <haidt3004@gmail.com>
     * @copyright 2015 Verz Design
     * @return string
     * @Todo: get description of Whistle
     */
    public function getDescription() {
        return $this->short_content;
    }

    /**
     * @Author Haidt <haidt3004@gmail.com>
     * @copyright 2015 Verz Design
     * @return string
     * @Todo: get content of Whistle
     */
    public function getContent() {
        return $this->content;
    }

    public static function getUser($id){
        $user = Users::model()->findByPk((int)$id);

        if (!empty($user)) {
            return $user->email;
        }

        return '';
    }

}

